---  
- hosts: localhost  
  connection: local  
  gather_facts: False    
  vars:  
    region: eu-west-1
    ami_id: ami-07683a44e80cd32c5
    az: eu-west-1a
  tasks:  
    - name: create VPC
      ec2_vpc_net:
        name: test-vpc
        cidr_block: 10.0.0.0/16
        region: "{{ region }}"
      register: create_vpc

    - name: "set fact: VPC ID"
      set_fact:
        vpc_id: "{{ create_vpc.vpc.id }}"

    - name: Create an Internet gateway_id
      ec2_vpc_igw:
        vpc_id: "{{ vpc_id }}"
        region: "{{ region }}"
        state: present
      register: igw
    
    - name: create subnets
      ec2_vpc_subnet:
        vpc_id: "{{ vpc_id }}"
        cidr: 10.0.0.0/24
        region: "{{ region }}"
        az: "{{ az }}"
      register: create_subnet

    - name: "set fact: Subnet ID"
      set_fact:
        subnet_id: "{{ create_subnet.subnet.id }}"

    - name: create security group  
      ec2_group:
        name: sg_webservertest    
        description: security group for testing ansible
        region: "{{ region }}"
        vpc_id: "{{ vpc_id }}"
        rules:
        - proto: tcp  
          from_port: 22  
          to_port: 22  
          cidr_ip: 0.0.0.0/0  
        - proto: tcp  
          from_port: 80    
          to_port: 80    
          cidr_ip: 0.0.0.0/0  
        rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0  

    - name: Set up public Subnet route table
      ec2_vpc_route_table:
        region: "{{ region }}"
        vpc_id: "{{ vpc_id }}"
        tags:
          Name: Public
        subnets: "{{ subnet_id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: igw-0d463711789ac26e1
      register: public_route_table 

    - name: Provision a EC2 instances
      ec2_instance:
        name: web-test-ansible
        key_name: key_ansible
        region: "{{ region }}"
        vpc_subnet_id: "{{ subnet_id }}"
        security_group: sg_webservertest
        instance_type: t2.micro
        image_id: "{{ ami_id }}"
        wait: True
        network:
          assign_public_ip: yes
      register: ec2
    - name: Wait for ssh to come up
      wait_for: hosts={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
      with_items: '{{ ec2.instances }}'